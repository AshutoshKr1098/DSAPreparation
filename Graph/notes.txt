1. BFS Questions

- Single source shortest path to all nodes (uses distance array)
- Find shortest path from source to destination (uses parent arrray)
- https://leetcode.com/problems/shortest-path-in-binary-matrix/ (uses distance array)
- https://leetcode.com/problems/shortest-path-to-get-food/submissions/ (uses distance array)
- https://leetcode.com/problems/walls-and-gates/  [solved using the approach of rotten oranges]
TODO Questions
- https://leetcode.com/problems/rotting-oranges/ [need to optimize the solution]


Graph with DP
https://leetcode.com/problems/as-far-from-land-as-possible/ [this also looks like we can solve using rotten oranges approach]
https://leetcode.com/problems/longest-increasing-path-in-a-matrix/


2. DFS Questions
1. https://leetcode.com/problems/number-of-islands/ 
2. https://leetcode.com/problems/max-area-of-island/submissions/ [same as above, just count for the area]
3. https://leetcode.com/problems/number-of-closed-islands/
4. https://leetcode.com/problems/keys-and-rooms/
5. 

3. Flood Fill Algorithm
1. https://practice.geeksforgeeks.org/problems/flood-fill-algorithm1856/1#
TODO
1. https://leetcode.com/problems/graph-valid-tree/
2. https://leetcode.com/problems/flood-fill/
3. https://leetcode.com/problems/island-perimeter/ [similar to dfs-3]
4. Go to similar problem for number of islands and solve them

class Solution {
public:
    bool solve(int i,int j,vector<vector<int>>& grid,vector<vector<int>>&visited,vector<vector<int>>&island)
    {
        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size())
            return false;
        if(visited[i][j]==1)
        {
            if(island[i][j]==-1 || island[i][j]==1)
                return true;
            else 
                return false;
        }
        if(grid[i][j]==1)
            return true;
        visited[i][j]=1;
        
        //left
        bool l = solve(i-1,j,grid,visited,island);
        
        //right
        bool r = solve(i+1,j,grid,visited,island);
        
        //top
        bool t = solve(i,j-1,grid,visited,island);
        
        //bottom
        bool b = solve(i,j+1,grid,visited,island);
        island[i][j]=(l && r && t && b);
        return (l && r && t && b);
    }
    int closedIsland(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>visited;
        int cnt=0;
        for(int i=0;i<m;i++)
        {
            vector<int>temp;
            for(int j=0;j<n;j++)
                temp.push_back(0);
            visited.push_back(temp);
        }
        vector<vector<int>>island;
        for(int i=0;i<m;i++)
        {
            vector<int>temp;
            for(int j=0;j<n;j++)
                temp.push_back(-1);
            island.push_back(temp);
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(!visited[i][j] && grid[i][j]==0)
                {
                    bool res=solve(i,j,grid,visited,island);
                    if(res)
                    {
                        cnt++;
                        
                    }
                }
            }
        }
        return cnt;   
 
    }
};